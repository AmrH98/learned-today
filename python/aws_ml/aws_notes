AWS Machine learning Fundamentals

Lesson 1:
 	Clean and Modular code
  	Refactoring Code
  	Writing clean code
    	https://www.python.org/dev/peps/pep-0008/?#code-lay-out
		
 	Writing a modular code
		Abstract out logic to improve readability 
		Minimize number of entities 
		Functions should be focused
		Minimize number of arguments
		
	Efficient code
	Documentation
		In-line comments
		Docstrings
			www.python.org/dev/peps/pep-0257/
			www.numpydoc.readthedocs.io/en/latest/format.html
	Project Documentation README.md
			classroom.udacity.com/courses/ud777
	Version Control
	Model Versioning 
		How to version control your production machine learning products
		Versioning Data Science
		https://algorithmia.com/blog/how-to-version-control-your-production-machine-learning-models


Lesson 2:
	Testing
		Test driven development 
			docs.python-guide.org/writing/tests/
			engineering.pivotal.io/post/test-driven-development-for-data-science/
			www.linkedin.com/pulse/data-science-test-driven-development-sam-savage/

		UNIT test
			www.fullstackpython.com/integration-testing.html
			www.predictiveanalyticsworld.com/machinelearningtimes/four-ways-data-science-goes-wrong-and-how-test-driven-data-analysis-can-help/6947/
			speakerdeck.com/pycon2014/getting-started-testing-by-ned-batchelder
			pytest
			
		Logging
			Log messages
			
		Code reviews
			github.com/lyst/MakingLyst/tree/master/code-reviews
			www.kevinlondon.com/2015/05/05/code-review-best-practices.html
			
			Questions to Ask Yourself When Conducting a Code Review
			
				First, let's look over some of the questions we may ask ourselves while reviewing code. 
				These are simply from the concepts we've covered in these last two lessons!
				
					Is the code clean and modular?
					Can I understand the code easily?
					Does it use meaningful names and whitespace?
					Is there duplicated code?
					Can you provide another layer of abstraction?
					Is each function and module necessary?
					Is each function or module too long?
					Is the code efficient?
					Are there loops or other steps we can vectorize?
					Can we use better data structures to optimize any steps?
					Can we shorten the number of calculations needed for any steps?
					Can we use generators or multiprocessing to optimize any steps?
					Is documentation effective?
					Are in-line comments concise and meaningful?
					Is there complex code that's missing documentation?
					Do function use effective docstrings?
					Is the necessary project documentation provided?
					Is the code well tested?
					Does the code high test coverage?
					Do tests check for interesting cases?
					Are the tests readable?
					Can the tests be made more efficient?
					Is the logging effective?
					Are log messages clear, concise, and professional?
					Do they include all relevant and useful information?
					Do they use the appropriate logging level?

			Use code linter
			Pylint
			Suggestions
			Objective
			Code examples


Lesson 3:
	OOP
