AWS Machine learning Fundamentals

Lesson 1:
 	Clean and Modular code
  	Refactoring Code
  	Writing clean code
    	https://www.python.org/dev/peps/pep-0008/?#code-lay-out
		
 	Writing a modular code
		Abstract out logic to improve readability 
		Minimize number of entities 
		Functions should be focused
		Minimize number of arguments
		
	Efficient code
	Documentation
		In-line comments
		Docstrings
			www.python.org/dev/peps/pep-0257/
			www.numpydoc.readthedocs.io/en/latest/format.html
	Project Documentation README.md
			classroom.udacity.com/courses/ud777
	Version Control
	Model Versioning 
		How to version control your production machine learning products
		Versioning Data Science
		https://algorithmia.com/blog/how-to-version-control-your-production-machine-learning-models


Lesson 2:
	Testing
		Test driven development 
			docs.python-guide.org/writing/tests/
			engineering.pivotal.io/post/test-driven-development-for-data-science/
			www.linkedin.com/pulse/data-science-test-driven-development-sam-savage/

		UNIT test
			www.fullstackpython.com/integration-testing.html
			www.predictiveanalyticsworld.com/machinelearningtimes/four-ways-data-science-goes-wrong-and-how-test-driven-data-analysis-can-help/6947/
			speakerdeck.com/pycon2014/getting-started-testing-by-ned-batchelder
			pytest
			
		Logging
			Log messages
			
		Code reviews
			github.com/lyst/MakingLyst/tree/master/code-reviews
			www.kevinlondon.com/2015/05/05/code-review-best-practices.html
			
			Questions to Ask Yourself When Conducting a Code Review
			
				First, let's look over some of the questions we may ask ourselves while reviewing code. 
				These are simply from the concepts we've covered in these last two lessons!
				
					Is the code clean and modular?
					Can I understand the code easily?
					Does it use meaningful names and whitespace?
					Is there duplicated code?
					Can you provide another layer of abstraction?
					Is each function and module necessary?
					Is each function or module too long?
					Is the code efficient?
					Are there loops or other steps we can vectorize?
					Can we use better data structures to optimize any steps?
					Can we shorten the number of calculations needed for any steps?
					Can we use generators or multiprocessing to optimize any steps?
					Is documentation effective?
					Are in-line comments concise and meaningful?
					Is there complex code that's missing documentation?
					Do function use effective docstrings?
					Is the necessary project documentation provided?
					Is the code well tested?
					Does the code high test coverage?
					Do tests check for interesting cases?
					Are the tests readable?
					Can the tests be made more efficient?
					Is the logging effective?
					Are log messages clear, concise, and professional?
					Do they include all relevant and useful information?
					Do they use the appropriate logging level?

			Use code linter
			Pylint
			Suggestions
			Objective
			Code examples


Lesson 3:

	OOP	
		procedural vs object-oriented programming
		classes, objects, methods and attributes
		coding a class
		magic methods
		inheritance
		
	OOP to build a python package
		making a package
		tour of scikit-learn source code
		putting your package on PyPi
		github.com/udacity/DSND_Term2/tree/master/lessons/ObjectOrientedProgramming
		
	OOP vocabulary 
		class - a blueprint consisting of methods and attributes
		object - an instance of a class. It can help to think of objects as something in the real 
		world like a yellow pencil, a small dog, a blue shirt, etc. However, as you'll see later in the lesson, 
		objects can be more abstract.
		attribute - a descriptor or characteristic. Examples would be color, length, size, etc. 
		These attributes can take on specific values like blue, 3 inches, large, etc.
		method - an action that a class or object could take
		encapsulation - one of the fundamental ideas behind object-oriented programming is called
		encapsulation: you can combine functions and data all into a single entity. In object-oriented programming, 
		this single entity is called a class. Encapsulation allows you to hide implementation details much like how 
		the scikit-learn package hides the implementation of machine learning algorithms.
		
	Set and Get Methods
		www.python-course.eu/python3_properties.php

	Gaussian Class and binomial distribution *R*
	
		www.udacity.com/course/intro-to-statistics--st101
		www.udacity.com/course/intro-to-descriptive-statistics--ud827
		/en.wikipedia.org/wiki/Normal_distribution
		/en.wikipedia.org/wiki/Binomial_distribution
		Read in dataset
		Calculate mean
		Calculate standard deviation
		Plot histogram plot probability density function
		Add two gaussian distributions
		
	Inheritance
		class methods, instance methods, and static methods - these are different types of methods that 
		can be accessed at the class or object level : realpython.com/primer-on-python-decorators/

		class attributes vs instance attributes - you can also define attributes at the class level or 
		at the instance level : 
		medium.com/m/global-identity?redirectUrl=https%3A%2F%2Feasyaspython.com%2Fmixins-for-fun-and-profit-cb9962760556

		multiple inheritance, mixins - A class can inherit from multiple parent :
		classes /www.python-course.eu/python3_class_and_instance_attributes.php

		Python decorators - Decorators are a short-hand way for using functions inside other functions :  
		realpython.com/instance-class-and-static-methods-demystified/

	Python Package
		Virtual environment  

	







